













# Wyzecam Analysis
```{r}
library(tidyverse)

```

```{r}
files <- list.files(
  "../Camera Traps/",
  full.names = TRUE,
  recursive = TRUE,
  include.dirs = FALSE,
  pattern = ".mp4|.png"
)

d = str_extract(files, "\\d{8}") |> dmy()
t = str_extract(files, "_\\d{4}") |> str_remove("_")
event_type = str_extract(files, "_[A-z]+\\.") |>
  str_remove_all("[_|\\.]")
camera = str_extract(files, "W.*\\d/") |>
  str_remove_all("/") |>
  str_remove("jan_25") |>
  str_remove("jan_24")

df <- tibble(
  file = files,
  date = d,
  time = t,
  event_type = event_type,
  camera = camera
)

# Full date range across all cameras
global_min_date <- min(df$date, na.rm = TRUE)
global_max_date <- max(df$date, na.rm = TRUE)
full_date_seq <- seq(global_min_date, global_max_date, by = "day")

# Dates each camera was active
active_dates <- df |>
  filter(!is.na(camera), !is.na(date)) |>
  distinct(camera, date) |>
  mutate(was_active = TRUE)

# Generate full date frame per camera
camera_full_dates <- expand_grid(
  camera = unique(active_dates$camera),
  date = full_date_seq
)

# Join with actual data to find missing days
inactive_days <- camera_full_dates |>
  left_join(active_dates, by = c("camera", "date")) |>
  filter(is.na(was_active)) # only days not matched


# Group missing days into contiguous gaps
inactive_periods <- inactive_days |>
  arrange(camera, date) |>
  group_by(camera) |>
  mutate(
    gap_group = cumsum(date != lag(date) + days(1) | is.na(lag(date)))
  ) |>
  group_by(camera, gap_group) |>
  summarise(
    inactive_from = min(date),
    inactive_to = max(date),
    days_inactive = as.integer(inactive_to - inactive_from) + 1,
    .groups = "drop"
  ) |>
  filter(days_inactive > 5) |>
  group_by(camera) |>
  summarise(
    `Inactive period` = paste0(
      format(inactive_from, "%b %d"),
      " - ",
      format(inactive_to, "%b %d")
    )
  ) |>
  group_by(camera) |>
  summarise(
    `Inactive periods` = str_c(`Inactive period`, collapse = ", ")
  )


df |>
  group_by(camera) |>
  # Calculate weekly statistics
  mutate(week = floor_date(date, "week")) |>
  group_by(camera, week) |>
  summarise(
    weekly_events = n(),
    .groups = "drop"
  ) |>
  group_by(camera) |>
  summarise(
    first_date = min(week),
    last_date = max(week),
    total_events = sum(weekly_events),
    weeks_with_data = n(),
    mean_events_per_week = mean(weekly_events),
    sd_events_per_week = sd(weekly_events),
    .groups = "drop"
  ) |>
  # Back to your original structure with the new SD column
  left_join(
    df |>
      mutate(
        event_type = str_to_sentence(str_replace_all(
          event_type,
          c("person" = "motion", "car" = "vehicle", "kanagroo" = "kangaroo")
        )) |>
          str_trim()
      ) |>
      group_by(camera, event_type) |>
      summarise(type_events = n(), .groups = "drop") |>
      group_by(camera) |>
      mutate(
        total_camera_events = sum(type_events),
        percent_of_total = type_events / total_camera_events * 100,
      ) |>
      arrange(camera, desc(percent_of_total)) |>
      summarise(
        `Objects (% of events)` = paste0(
          event_type,
          " (",
          round(percent_of_total, 1),
          "%)"
        ) |>
          str_c(collapse = ", "),
        .groups = "drop"
      ),
    by = "camera"
  ) |>
  mutate(
    `Operating period` = paste0(
      format(first_date, "%b %Y"),
      "-",
      format(last_date, "%b %Y")
    ),
    `Events captured (Mean±SD per week)` = paste0(
      total_events,
      " (",
      round(mean_events_per_week, 1),
      "±",
      round(sd_events_per_week, 1),
      ") "
    )
  ) |>
  left_join(inactive_periods, by = c("camera" = "camera")) |>
  select(
    `Camera No` = camera,
    `Events captured (Mean±SD per week)`,

    `Objects (% of events)`,
    `Inactive periods`
  ) |>

  write.csv("wyzecam_analysis.csv", row.names = FALSE)

```





```{r}

```










